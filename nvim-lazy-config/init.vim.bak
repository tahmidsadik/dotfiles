set ruler

set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set laststatus=2
set encoding=utf-8
set showcmd
set number
set smartindent
set autoindent

set linespace=3
set wrap
set textwidth=80
set incsearch
set hlsearch
set ignorecase
set mousehide
set noswapfile

set cursorline
set clipboard=unnamedplus

let mapleader = ","

" set cursorcolumn

let g:node_host_prog = '/Users/tahmid/Library/Application Support/fnm/node-versions/v18.16.0/installation/bin/node'
" set the title of the current file we are editing

let $PATH = '/Users/tahmid/Library/Application Support/fnm/node-versions/v18.16.0/installation/bin:' . $PATH

set title

" source settings
nmap <leader>ss :source ~/.config/nvim/init.vim<CR>

" Setting up guifont
" set guifont=CaskaydiaCove\ Nerd\ Font\ Mono:h12
" set guifont=Operator\ Mono\ Nerd\ Font:h12
" set guifont=mononoki\ Nerd\ Font\ Mono:h12
" set guifont=Fira\ Code\ Light:h12
set guifont=OperatorMono\ Nerd\ Font:h14


"disable netrw
let loaded_netrwPlugin = 1

lua << EOF

require('config')
require('lsp')
require('root')

EOF

" call plug#begin()
" Startify
" Plug 'mhinz/vim-startify' 

" Table mode
" Plug 'dhruvasagar/vim-table-mode'

" Ansi escape for nicer documentation
" Plug 'powerman/vim-plugin-AnsiEsc'

" zig
" Plug 'ziglang/zig.vim'

" Editor config for vim
" Plug 'editorconfig/editorconfig-vim'

" git stuff
" Plug 'airblade/vim-gitgutter'
let g:gitgutter_map_keys = 0
" Plug 'tpope/vim-fugitive'

" inline todo
" Plug 'vitalk/vim-simple-todo'

" terminal management
" Plug 'mklabs/split-term.vim'
" Plug 'voldikss/vim-floaterm'
" set splitright
" set splitbelow

" yank highlighting
" Plug 'machakann/vim-highlightedyank'

"clojure plugins
" Plug 'https://github.com/guns/vim-clojure-static.git', { 'for': 'clojure' }
" Plug 'https://github.com/tpope/vim-fireplace.git', { 'for': 'clojure' }
" Plug 'https://github.com/jpalardy/vim-slime.git', { 'for': 'clojure' }
" Plug 'https://github.com/kien/rainbow_parentheses.vim.git', { 'for': 'clojure' }

" Golang support 
" Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

"nerdtree 
" Plug 'https://github.com/scrooloose/nerdtree.git', { 'on':  'NERDTreeToggle' } 
" Plug 'mattn/emmet-vim'

" Vim Notes
" Plug 'xolox/vim-notes'
" Plug 'xolox/vim-misc'

" Align stuff
" Plug 'tommcdo/vim-lion'

" Plug 'iamcco/markdown-preview.nvim'

" Plug 'https://github.com/github/copilot.vim'

" Rust language support
" Plug 'rust-lang/rust.vim'
au FileType rust nmap rr :VTerm cargo run<cr>
au FileType rust nmap re :VTerm cargo check<cr>

au FileType javascript nmap rr :VTerm npm start<cr>
au FileType typescript nmap rr :VTerm npm start<cr>
" au FileType typescript nmap rr :terminal ts-node %<cr>
au FileType go nmap rr :VTerm go run ./main.go<cr>
au FileType go nmap rr :VTerm go run ./main.go<cr>

echo expand('%:t')
" nmap re :Build()<cr>
" nmap rr :Run()<cr>

" Tree-Sitter

" Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
" Plug 'nvim-treesitter/playground'

" toml syntax highlighting
" Plug 'cespare/vim-toml'
" let g:autofmt_autosave = 1

" colorizer
" Plug 'norcalli/nvim-colorizer.lua'

" Language pack
" Plug 'sheerun/vim-polyglot'

" LSP Configurations
" Plug 'neovim/nvim-lspconfig'

" CMP plugins
" Plug 'hrsh7th/nvim-cmp'
" Plug 'hrsh7th/cmp-nvim-lsp'
" Plug 'hrsh7th/cmp-buffer'
" Plug 'hrsh7th/cmp-path'
" Plug 'hrsh7th/cmp-cmdline'
" Luasnip
" Plug 'L3MON4D3/LuaSnip'
" Plug 'saadparwaiz1/cmp_luasnip'

" Trouble 
" Plug 'kyazdani42/nvim-web-devicons'
" Plug 'folke/trouble.nvim'
" Plug 'nvim-lua/plenary.nvim'
" Plug 'jose-elias-alvarez/null-ls.nvim'
" Plug 'MunifTanjim/eslint.nvim'
" Plug 'MunifTanjim/prettier.nvim'
" Plug 'cohama/lexima.vim'
" Plug 'neoclide/coc.nvim', {'tag': 'v0.0.81'}

" global plugins
" let g:coc_global_extensions = [
"       \ 'coc-actions',
"       \ 'coc-css',
"       \ 'coc-emoji',
"       \ 'coc-eslint',
"       \ 'coc-html',
"       \ 'coc-json',
"       \ 'coc-explorer',
"       \ 'coc-marketplace',
"       \ 'coc-pairs',
"       \ 'coc-prettier',
"       \ 'coc-snippets',
"       \ 'coc-tsserver',
"       \ 'coc-vimlsp',
"       \ 'coc-yaml',
"       \ 'coc-rls',
"       \ 'coc-rust-analyzer',
"       \ 'coc-zls',
"       \ 'coc-go'
"       \ ]

" Coc configurations
" start
" set cmdheight=2
" set updatetime=300
" set shortmess+=c
" set signcolumn=yes
" " Commented out because coc moved to use native pop up menu in 0.8.2
" inoremap <silent><expr> <TAB>
"       \ pumvisible() ? "\<C-n>" :
"       \ <SID>check_back_space() ? "\<TAB>" :
"       \ coc#refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
"
" function! s:check_back_space() abort
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1]  =~# '\s'
" endfunction
"
" " Use <c-space> to trigger completion.
" inoremap <silent><expr> <c-space> coc#refresh()
" " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" " Coc only does snippet and additional edit on confirm.
" " Commented because clash with neovim 0.8.2 coc
" inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" " inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<C-y>"
"
" " Or use `complete_info` if your vim support it, like:
" " inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
" " Use `[g` and `]g` to navigate diagnostics
" nmap <silent> [g <Plug>(coc-diagnostic-prev)
" nmap <silent> ]g <Plug>(coc-diagnostic-next)
"
" " Remap keys for gotos
" nmap <silent> gd <Plug>(coc-definition)
" nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
" nmap <silent> gr <Plug>(coc-references)
" " Use K to show documentation in preview window
" nnoremap <silent> K :call <SID>show_documentation()<CR>
"
" function! s:show_documentation()
"   if (index(['vim','help'], &filetype) >= 0)
"     execute 'h '.expand('<cword>')
"   else
"     call CocAction('doHover')
"   endif
" endfunction


" Highlight symbol under cursor on CursorHold
" autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
" nmap <F2> <Plug>(coc-rename)

" Remap for format selected region
" xmap <leader>f  <Plug>(coc-format-selected)
" nmap <leader>f  <Plug>(coc-format-selected)

" augroup mygroup
"   autocmd!
"   " Setup formatexpr specified filetype(s).
"   autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
"   " Update signature help on jump placeholder
"   autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
" augroup end
"
" " Use `:Format` to format current buffer
" command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
" command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
" command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
" nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" " Manage extensions
" nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" " Show commands
" nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" " Find symbol of current document
" nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" " Search workspace symbols
" nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" " Do default action for next item.
" nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" " Do default action for previous item.
" nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" " Resume latest coc list
" nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
" nnoremap <leader>oi :call CocAction('runCommand', 'editor.action.organizeImport')<CR>



" COC config end


" rest api request chekcing in vim
" Plug 'diepm/vim-rest-console'

"Utilities
" Plug 'https://github.com/tpope/vim-surround.git'
" source /usr/share/doc/fzf/examples/fzf.vim
" Plug '~/.fzf'
" Plug 'junegunn/fzf.vim', { 'do': { -> fzf#install} }


" vim clap
" Plug 'liuchengxu/vim-clap'
" Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' }

"tcomment plugin
" Plug 'https://github.com/tomtom/tcomment_vim.git'

"colorschemes
" Plug 'matthewtodd/vim-twilight'
" Plug 'jnurmine/Zenburn'
" Plug 'vim-scripts/xoria256.vim'
" Plug 'nanotech/jellybeans.vim'
" Plug 'morhetz/gruvbox'
" Plug 'zeis/vim-kolor'
" Plug 'tomasr/molokai'
" Plug 'altercation/vim-colors-solarized'
" Plug 'nathanaelkane/vim-indent-guides'
" Plug 'ayu-theme/ayu-vim'
" Plug 'fneu/breezy'
" Plug 'dim13/smyck.vim'
" Plug 'joshdick/onedark.vim'
" Plug 'iCyMind/NeoSolarized'
" Plug 'haishanh/night-owl.vim'
" Plug 'NLKNguyen/papercolor-theme'
" Plug 'skbolton/embark'
" Plug 'arcticicestudio/nord-vim', { 'branch': 'main' }
" Plug 'franbach/miramare'
" Plug 'srcery-colors/srcery-vim'
" Plug 'vimoxide/vim-cinnabar'
" Plug 'fenetikm/falcon'
" Plug 'sainnhe/forest-night'
" Plug 'sainnhe/gruvbox-material'
" Plug 'sainnhe/edge'
" Plug 'sainnhe/sonokai'
" Plug 'aonemd/quietlight.vim'

" Status line
" Plug 'itchyny/lightline.vim'
" Plug 'shinchu/lightline-gruvbox.vim'

" let g:lightline = {
"       \ 'component': {
"       \   'lineinfo': ' %3l:%-2c',
"       \ },
"       \ 'component_function': {
"       \   'readonly': 'LightlineReadonly',
"       \   'fugitive': 'LightlineFugitive'
"       \ },
"       \ 'separator': { 'left': '', 'right': '' },
"       \ 'subseparator': { 'left': '', 'right': '' },
"       \ 'tabline_separator': { 'left': "\ue0bc", 'right': "\ue0ba" },
"       \ 'tabline_subseparator}':  { 'left': "\ue0bb", 'right': "\ue0bb" }
"       \ }
" \ 'separator':  { 'left': "\ue0b8", 'right': "\ue0be" },
" \ 'subseparator': { 'left': "\ue0b9", 'right': "\ue0b9" },
" \ 'separator': { 'left': '', 'right': '' },
" \ 'subseparator': { 'left': '', 'right': '' },

" function! LightlineReadonly()
"   return &readonly ? '' : ''
" endfunction
"
" function! LightlineFugitive()
"   if exists('*FugitiveHead')
"     let branch = FugitiveHead()
"     return branch !=# '' ? ''.branch : ''
"   endif
"   return ''
" endfunction

" let g:lightline = {}
" let g:lightline.colorscheme = 'jellybeans'
" let g:falcon_lightline = 1
" let g:lightline.colorscheme = 'onedark'
" let g:lightline.colorscheme = 'solarized'
" let g:lightline.colorscheme = 'nord'

" let g:lightline.colorscheme = 'edge'

"Distraction free mode
" Plug 'https://github.com/junegunn/goyo.vim.git'
" Plug 'https://github.com/junegunn/limelight.vim.git'

" vim devicons; needs to be loaded last
" Plug 'ryanoasis/vim-devicons'

" Plug 'nvim-tree/nvim-tree.lua'

" lsp code action menu 
" Plug 'weilbith/nvim-code-action-menu'
" Plug 'kosayoda/nvim-lightbulb'
" Plug 'antoinemadec/FixCursorHold.nvim'

" call plug#end()


filetype plugin indent on
syntax on

" Lightbulb autocmd

" set runtimepath^=~/.vim/bundle/ctrlp.vim

" indent settings by file type
autocmd FileType html setlocal shiftwidth=2 tabstop=2
autocmd FileType elixir setlocal shiftwidth=2 tabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2

tmap <C-k> :IExHide<CR>

"tab options
nmap <C-n> :tabnew<cr>

"switching between panes
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l
" resizing windows 
nmap <A-right> :vertical res +2<CR>
nmap <A-left> :vertical res -2<CR>
nmap <A-up> :res -2<CR>
nmap <A-down> :res +2<CR>
nmap <leader>h <C-w>H
nmap <leader>k <C-w>K

" nmap <leader>t :Mix test<cr>
" nmap <leader>l :Mix dialyzer<cr>
nmap <leader>1 :tabn<cr>
nmap <leader>2 :tabp<cr>
nmap <leader><tab> :b#<cr>
"vimrc sorcing
nmap <leader>ev :tabedit $MYVIMRC<CR>

nnoremap <leader>xx <cmd>TroubleToggle<cr>
nnoremap <leader>xw <cmd>TroubleToggle workspace_diagnostics<cr>
nnoremap <leader>xd <cmd>TroubleToggle document_diagnostics<cr>
nnoremap <leader>xq <cmd>TroubleToggle quickfix<cr>
nnoremap <leader>xl <cmd>TroubleToggle loclist<cr>
nnoremap gR <cmd>TroubleToggle lsp_references<cr>

if (has("termguicolors"))
 set termguicolors
endif

" enable truecolor
" if has('termguicolors')
"   if ! has('nvim')
"     " *xterm-true-color*
"     let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
"   endif
" endif

" colorscheme NeoSolarized
" colorscheme onedark
" colorscheme embark
" colorscheme edge
" colorscheme nord
" colorscheme miramare
" colorscheme night-owl 
" colorscheme onedark
colorscheme quietlight 
set bg=light
set foldenable

" imap <leader><tab> <C-x><C-o>
" imap jj <esc>

"More useful command line options
set wildmenu
set wildmode=list:longest
"Opens a vertiocal split and switches over (\v)
nnoremap <leader>v <C-w>v

set showmatch
set formatoptions=qrn1
" if has("autocmd")
"   autocmd bufwritepost init.vim source $MYVIMRC
" endif

au BufNewFile,BufRead *.ejs set filetype=html

" git operations hotkeys
" aliases the terminal keys e.g. gst for git status, ga for git add etc
nmap <leader>gst :Gstatus<CR>
nmap <leader>gd :Gdiff<CR>
nmap <leader>grm :Gdelete<CR>
nmap <leader>gmv :Gmove<CR>
nmap <leader>gco :Gread<CR>
nmap <leader>ga :Gwrite<CR>
nmap <leader>gc :Gcommit %<CR>

" Vim Clap keybinding
" nmap <C-p> :Clap files<CR>
" imap <C-p> <Esc>:Clap files<CR>

" FZF config
" let $FZF_DEFAULT_COMMAND = 'rg --files'
" let $FZF_DEFAULT_OPTS = '--reverse'
" nmap <C-p> :Files<CR>
" imap <C-p> <Esc>:Files<CR>


" better ripgrep command: ZRG
command! -nargs=* -bang ZRG call RipgrepFzf(<q-args>, <bang>0)
function! RipgrepFzf(query, fullscreen)
  let command_fmt = '[ -n %s ] && rg --column --line-number --no-heading --color=always --smart-case -- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query), shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}', '{q}')
  let spec = {'options': ['--phony', '--prompt', 'Search > ', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

nmap <Leader>/ :ZLines<CR>
nmap <C-f> :ZRG<CR>


" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-p': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
let g:fzf_layout = {'window': {'width': 0.80, 'height': 0.70, 'yoffset': 0.1, 'border': 'sharp'}}

" In Neovim, you can set up fzf window using a Vim command

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'


"gvim dont show menu bar
set guioptions-=m
set guioptions-=T
set guioptions-=L

nmap <C-\> :NvimTreeToggle<CR>
imap <C-\> :CocCommand<CR>


"lua << EOF
"require'nvim-treesitter.configs'.setup {
"  -- A list of parser names, or "all"
"  ensure_installed = { "c", "lua", "rust", "javascript", "typescript", "json", "go", "java", "zig", "scala", "clojure" },
"
"  -- Install parsers synchronously (only applied to `ensure_installed`)
"  sync_install = false,
"
"  -- Automatically install missing parsers when entering buffer
"  auto_install = true,
"
"  -- List of parsers to ignore installing (for "all")
"  ignore_install = { },
"
"  ---- If you need to change the installation directory of the parsers (see -> Advanced Setup)
"  -- parser_install_dir = "/some/path/to/store/parsers", -- Remember to run vim.opt.runtimepath:append("/some/path/to/store/parsers")!
"
"  highlight = {
"    -- `false` will disable the whole extension
"    enable = true,
"
"    -- NOTE: these are the names of the parsers and not the filetype. (for example if you want to
"    -- disable highlighting for the `tex` filetype, you need to include `latex` in this list as this is
"    -- the name of the parser)
"    -- list of language that will be disabled
"    disable = { },
"
"    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
"    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
"    -- Using this option may slow down your editor, and you may see some duplicate highlights.
"    -- Instead of true it can also be a list of languages
"    additional_vim_regex_highlighting = false,
"  },
"}
"EOF

if exists("g:neovide")
  set guifont=OperatorMono\ Nerd\ Font:h16
    " Put anything you want to happen only in Neovide here
endif

